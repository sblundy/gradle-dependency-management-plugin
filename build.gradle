import org.gradle.api.artifacts.maven.MavenDeployment

apply plugin: 'groovy'
apply plugin: 'codenarc'
apply plugin: 'maven'
apply plugin: 'signing'

buildscript {
  apply from: 'https://github.com/valkolovos/gradle_cobertura/raw/master/repo/gradle_cobertura/gradle_cobertura/1.2.1/coberturainit.gradle'
}

group = 'com.github.sblundy.gradle.dependencymanagement'
version = '0.2.0-SNAPSHOT'

repositories {
  mavenCentral()
}

sourceSets {
  functionalTest {
    groovy.srcDir file('src/functionalTest/groovy')
  }
}

dependencies {
  compile gradleApi()
  compile localGroovy()

  functionalTestRuntime gradleApi()
  functionalTestCompile configurations.testCompile
  functionalTestCompile files(jar.archivePath)
  functionalTestRuntime configurations.compile
  functionalTestRuntime configurations.testRuntime

  codenarc 'org.codenarc:CodeNarc:0.18.1'
}

cobertura {
  coverageSourceDirs = project.sourceSets.main.groovy.srcDirs
}

groovydoc {
  groovyClasspath = configurations.compile
  link('http://www.gradle.org/docs/current/javadoc', 'org.gradle.api.')
  link('http://docs.oracle.com/javase/6/docs/api', 'java.,org.xml.,javax.,org.xml.')
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
  classifier = 'javadoc'
  from "${buildDir}/docs/groovydoc"
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

task functionalTest(type:Test, dependsOn: ['test', 'jar']) {
  testClassesDir = sourceSets.functionalTest.output.classesDir
  classpath = sourceSets.functionalTest.runtimeClasspath
  testReportDir = file("${buildDir}/reports/functional-test")
  testResultsDir = file("${buildDir}/functional-test-results")
}

artifacts {
  archives jar

  archives javadocJar
  archives sourcesJar
}

signing {
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      if (version.endsWith("-SNAPSHOT")) {
        snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
          authentication(userName: sonatypeUsername, password: sonatypePassword)
        }
      } else {
        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
          authentication(userName: sonatypeUsername, password: sonatypePassword)
        }
      }

      pom.project {
        name 'Gradle Dependency Management Plugin'
        packaging 'jar'
        description 'Centralized dependency management for Gradle multi-module projects'
        url 'https://github.com/sblundy/gradle-dependency-management-plugin'

        scm {
          url 'scm:git@github.com:sblundy/gradle-dependency-management-plugin.git'
          connection 'scm:git@github.com:sblundy/gradle-dependency-management-plugin.git'
          developerConnection 'scm:git@github.com:sblundy/gradle-dependency-management-plugin.git'
        }

        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
          }
        }

        developers {
          developer {
            id 'sblundy'
            name 'Steven Blundy'
          }
        }
      }
    }
  }
}

build.dependsOn.add(functionalTest)